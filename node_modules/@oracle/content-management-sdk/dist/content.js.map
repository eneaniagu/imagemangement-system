{"version":3,"file":"content.js","sources":["../src/content.js"],"sourcesContent":["/**\n * Copyright (c) 2017, 2021, Oracle and/or its affiliates.\n * Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/\n */\n\n// Detect whether we're running in a browser or in NodeJS.\n// Note that some other environments (e.g. React-Native) are not detected and may not\n// work properly.\nconst isNodeJS = typeof window === 'undefined' && typeof process === 'object';\n\n//\n// ------------------------------- Cross-browser Utility functions ---------------------\n//\nconst utils = {\n  bind(func, owner) {\n    return function (...args) {\n      return func.apply(owner, args);\n    };\n  },\n  extend(dest, orig) {\n    for (const prop in orig) {\n      if (orig.hasOwnProperty(prop)) {\n        dest[prop] = orig[prop];\n      }\n    }\n    return dest;\n  },\n};\n\n//\n// ------------------------------- Internal Logger -------------------------------------\n//\nconst logger = (function logger() {\n  const theLogger = {\n    logLevel: 'none',\n    logLevels: ['error', 'warn', 'info', 'debug', 'log'],\n  };\n  const dontLog = function dontLog(/* message */) {}; // swallow messages - default\n\n  theLogger.updateLogger = function updateLogger(newLogger) {\n    if (newLogger) {\n      // setup loggers for each logLevel\n      for (let i = 0; i < this.logLevels.length; i += 1) {\n        const logLevel = theLogger.logLevels[i];\n        theLogger[logLevel] = typeof newLogger[logLevel] === 'function'\n          ? utils.bind(newLogger[logLevel], newLogger)\n          : dontLog;\n      }\n    }\n  };\n  theLogger.updateLogger({}); // setup with no logging\n\n  return theLogger;\n}());\n\n//\n// ------------------------------- Internal Implementation -------------------------------------\n//\n\n// RequireJS config support\nconst requireConfig = {\n  requirePaths: {},\n  getContentLayoutRequirePath(info) {\n    const { contentServer } = info;\n    const cacheBuster = typeof info.cacheBuster === 'object'\n      ? info.cacheBuster\n      : {\n        layoutKey: info.cacheBuster,\n        systemKey: info.cacheBuster,\n      };\n    const layoutCacheBuster = cacheBuster.layoutKey\n      ? `/${cacheBuster.layoutKey}`\n      : '';\n    const systemCacheBuster = cacheBuster.systemKey\n      ? `/${cacheBuster.systemKey}`\n      : '';\n\n    // setup require config for this Content client's layouts if not already created\n    if (!this.requirePaths[contentServer]) {\n      // generate a unique require path to Content Layouts for this client\n      const baseRequirePath = `contentLayoutPath${Math.floor(\n        100000000 + Math.random() * 900000000,\n      )}`;\n      const paths = {};\n\n      // create paths for 'published' and 'draft'\n      paths[\n        `${baseRequirePath}published`\n      ] = `${contentServer}/_compdelivery${layoutCacheBuster}`;\n      paths[\n        `${baseRequirePath}draft`\n      ] = `${contentServer}/_themes/_components${layoutCacheBuster}`;\n      paths[\n        `${baseRequirePath}system`\n      ] = `${contentServer}/_sitescloud${systemCacheBuster}/sitebuilder/contentlayouts`;\n\n      // cache the base requireJS path for re-use with this content server\n      this.requirePaths[contentServer] = baseRequirePath;\n\n      // configure require to support these paths\n      requirejs.config({\n        paths,\n      });\n    }\n\n    return this.requirePaths[contentServer];\n  },\n  preloadContentLayout(requireLayout, resolve, reject) {\n    // require in the content layout to populate the require cache but don't render the item\n    require([requireLayout], (/* ContentLayout */) => {\n      // resolve the promise\n      resolve();\n    }, (err) => {\n      // note that can't find the layout and reject\n      logger.warn(\n        'ContentClient.renderLayout: Unable to render the layout.  Ensure you can access the layout: If running against published content, that the layout has been published. If draft, that you are logged onto the Sites server',\n      );\n      reject(`Failed to get layout: ${requireLayout} with error: ${err}`);\n    });\n  },\n  renderContentLayout(requireLayout, layoutParams, container, resolve, reject) {\n    // require in the render.js for the layout\n    require([requireLayout], (ContentLayout) => {\n      const renderLayout = new ContentLayout(layoutParams);\n\n      // call render to add the component to the page\n      const renderPromise = renderLayout.render(container);\n      if (\n        typeof renderPromise === 'object'\n        && typeof renderPromise.then === 'function'\n      ) {\n        renderPromise.then(\n          (/* status */) => {\n            // resolve the passed in Promise\n            resolve();\n          },\n          (errorStatus) => {\n            // failed to render, reject the passed in promise\n            reject(errorStatus);\n          },\n        );\n      } else {\n        // simply resolve the passed in promise\n        resolve();\n      }\n    }, (err) => {\n      // note that can't find the layout and reject\n      logger.warn(\n        'ContentClient.renderLayout: Unable to render the layout.  Ensure you can access the layout: If published, that the layout has been published. If draft, that you are logged onto the Sites server',\n      );\n      reject(`failed to get layout: ${requireLayout} with error: ${err}`);\n    });\n  },\n};\n\n// Node specific API\nclass RestAPINode {\n  constructor(args) {\n    Object.assign(this, args);\n  }\n\n  // Using this wrapper effectively changes static require() calls\n  // into dynamic requires which helps to bypass bundlers like rollup\n  // which try to keep the require/imports for this code in the client\n  // bundles (which fails in various ways).\n  //\n  // The code in RestAPINode is never executed in browsers anyways\n  // but this trick will allow the RestAPINode code to still be\n  // bundled in the client bundles.\n  requireOnlyOnNodeJS(pkg) {\n    if (isNodeJS) {\n      return require(pkg);\n    }\n\n    return undefined;\n  }\n\n  extractServer(contentServerURL) {\n    const url = this.requireOnlyOnNodeJS('url');\n    const contentServer = contentServerURL || 'http://localhost';\n    const parsedURL = url.parse(contentServer);\n\n    // extract the server part of the URL\n    return `${parsedURL.protocol}//${parsedURL.hostname}${\n      parsedURL.port ? `:${parsedURL.port}` : ''\n    }`;\n  }\n\n  async callRestServer(targetURL, restArgs) {\n    const self = this;\n\n    logger.debug(\n      `_rest.callRestServer: Calling ${restArgs.method} request with:`,\n    );\n    logger.debug(targetURL);\n    logger.debug(restArgs);\n\n    // require in the node REST call dependencies\n    const protocolCalls = {\n      'http:': this.requireOnlyOnNodeJS('http'),\n      'https:': this.requireOnlyOnNodeJS('https'),\n    };\n    const url = this.requireOnlyOnNodeJS('url');\n\n    const nodePromise = new Promise((resolve, reject) => {\n      // parse the URL\n      const options = url.parse(targetURL);\n      const protocolCall = protocolCalls[options.protocol || 'https:'];\n      let restRequest;\n      const proxyType = options.protocol || 'https:';\n      const proxy = proxyType === 'https:'\n        ? process.env.oce_https_proxy\n        : process.env.oce_http_proxy;\n\n      if (proxy) {\n        try {\n          logger.debug(`Using proxy: ${proxy}`);\n          const HttpsProxyAgent = this.requireOnlyOnNodeJS('https-proxy-agent');\n          logger.debug('Loaded proxy agent');\n          const agent = new HttpsProxyAgent(proxy);\n          logger.debug(`Using proxy: ${proxy} connecting to ${targetURL}`);\n          options.agent = agent;\n        } catch (e) {\n          logger.warn(\n            `Could not initialize https-proxy-agent. Is the package installed in your application?. Making direct call to ${targetURL}`,\n          );\n        }\n      }\n\n      // define function to call the consumer's \"beforeSend\" method if one was defined,\n      // to add additional values to the request options\n      const beforeSendOK = (currentOptions) => new Promise((bsResolve, bsReject) => {\n        try {\n          // if the consumer specified a \"beforeSend\" callback function then call it\n          // if the result is a promise then resolve the promise\n          if (typeof restArgs.beforeSend === 'function') {\n            const beforeSendResult = restArgs.beforeSend(currentOptions);\n            if (beforeSendResult && typeof beforeSendResult.then === 'function') {\n              return beforeSendResult\n                .then(() => bsResolve(beforeSendResult))\n                .catch((e) => bsReject({\n                  // error in user code, reject the call\n                  status: e,\n                  statusText: 'Error in beforeSend() callback promise',\n                }));\n            }\n            return bsResolve(beforeSendResult === undefined || beforeSendResult);\n          }\n          return bsResolve(true);\n        } catch (e) {\n          // error in user code, reject the call\n          return bsReject({\n            status: e,\n            statusText: 'Error in beforeSend() callback',\n          });\n        }\n      });\n\n      // function to handle request response into JSON\n      const requestResponse = function requestResponse(response) {\n        let body = '';\n        const responseStatus = response.statusCode;\n\n        response.on('data', (chunk) => {\n          body += chunk;\n        });\n\n        response.on('end', () => {\n          if (responseStatus >= 200 && responseStatus < 300) {\n            try {\n              const jsonResponse = JSON.parse(body);\n              resolve(jsonResponse);\n            } catch (e) {\n              reject({\n                error: body,\n              });\n            }\n          } else {\n            // return the error response object to be handled by calling function\n            reject(response);\n          }\n        });\n      };\n\n      // store the call type in options\n      options.method = restArgs.method.toUpperCase() || '';\n\n      if (options.method === 'GET' && targetURL) {\n        // handle 'GET' request\n\n        // allow the user to update the \"options\"\n        beforeSendOK(options).then((result) => {\n          if (result) {\n            restRequest = protocolCall.get(options, requestResponse);\n          } else {\n            // aborted the call\n            logger.debug('Call aborted by beforeSend');\n            reject({\n              error: 'call aborted by beforeSend()',\n            });\n          }\n        });\n      } else if (\n        options.method === 'POST'\n        && restArgs.noCSRFToken\n        && restArgs.postData\n      ) {\n        // handle 'POST' request\n\n        // setup the JSON body\n        const bodyString = JSON.stringify(restArgs.postData);\n        options.headers = {\n          'Content-Type': 'application/json',\n          'X-Requested-With': 'XMLHttpRequest',\n          'Content-Length': bodyString.length,\n        };\n\n        // do http or https get writing the bodyString\n        beforeSendOK(options).then((result) => {\n          if (result) {\n            restRequest = protocolCall.request(options, requestResponse).write(bodyString);\n          } else {\n            // aborted the call\n            logger.debug('Call aborted by beforeSend');\n            reject({\n              error: 'call aborted by beforeSend()',\n            });\n          }\n        });\n      } else {\n        // unsupported method\n        reject({\n          error: `unsupported REST request: ${JSON.stringify(restArgs)}`,\n        });\n      }\n\n      // set up common handling\n      if (restRequest) {\n        // handle errors\n        restRequest.on('error', (error) => {\n          reject({\n            error,\n          });\n        });\n\n        // handle timeout\n        restRequest.on('socket', (socket) => {\n          socket.setTimeout(restArgs.timeout);\n          socket.on('timeout', () => {\n            reject({\n              error: `request timed out after: ${restArgs.timeout}`,\n            });\n          });\n        });\n      } else {\n        logger.debug('no restRequest');\n      }\n    });\n\n    // return the promise\n    const response2 = await nodePromise;\n    if (typeof self.coerceData === 'function') {\n      return self.coerceData(response2);\n    }\n    return Promise.resolve(response2);\n  }\n}\n\n// Browser specific API\nclass RestAPIBrowser {\n  constructor(args) {\n    Object.assign(this, args);\n  }\n\n  extractServer(contentServerURL) {\n    // use the server URL if given, or default to the window URL\n    const contentServer = contentServerURL || (window.location && window.location.href);\n    const parsedURL = document.createElement('a');\n\n    // parse the URL\n    parsedURL.href = contentServer;\n\n    // extract the server part of the URL\n    return `${parsedURL.protocol}//${parsedURL.hostname}${\n      parsedURL.port ? `:${parsedURL.port}` : ''\n    }`;\n  }\n\n  async callRestServer(targetURL, restArgs) {\n    const self = this;\n\n    logger.debug(\n      `_rest.callRestServer: Calling ${restArgs.method} request with:`,\n    );\n    logger.debug(restArgs);\n\n    const xmlHTTPPromise = new Promise((resolve, reject) => {\n      // define function to call the consumer's \"beforeSend\" method if one was defined,\n      // to add additional values to the request options\n      const beforeSendOK = (currentXHR) => new Promise((bsResolve, bsReject) => {\n        try {\n          // if the consumer specified a \"beforeSend\" callback function then call it\n          // if the result is a promise then resolve the promise\n          if (typeof restArgs.beforeSend === 'function') {\n            const beforeSendResult = restArgs.beforeSend(currentXHR);\n            if (beforeSendResult && typeof beforeSendResult.then === 'function') {\n              return beforeSendResult\n                .then(() => bsResolve(beforeSendResult))\n                .catch((e) => bsReject({\n                  // error in user code, reject the call\n                  status: e,\n                  statusText: 'Error in beforeSend() callback promise',\n                }));\n            }\n            return bsResolve(beforeSendResult === undefined || beforeSendResult);\n          }\n          return bsResolve(true);\n        } catch (e) {\n          // error in user code, reject the call\n          return bsReject({\n            status: e,\n            statusText: 'Error in beforeSend() callback',\n          });\n        }\n      });\n\n      // create the XMLHttpRequest object and parameters\n      const xhr = new XMLHttpRequest();\n      const xhrParams = {\n        method: (restArgs.method && restArgs.method.toUpperCase()) || '',\n        url: targetURL,\n        timeout: restArgs.timeout,\n        headers: {},\n      };\n      let doRequest = true;\n\n      // add authorization header, if provided\n      if (restArgs.authorization) {\n        // for /published API calls, only add header if not 'session' or\n        // 'anonymous' (e.g. Basic Auth in non-POD environments)\n        if (\n          restArgs.contentType !== 'published'\n          || ['session', 'anonymous'].indexOf(restArgs.authorization) === -1\n        ) {\n          xhrParams.headers = {\n            Authorization: restArgs.authorization,\n          };\n        }\n      }\n\n      // add the individual request parameters\n      if (xhrParams.method === 'GET' && xhrParams.url) {\n        // 'GET' request\n      } else if (\n        xhrParams.method === 'POST'\n        && xhrParams.url\n        && restArgs.noCSRFToken\n        && restArgs.postData\n      ) {\n        // 'POST' request\n        xhrParams.headers['Content-Type'] = 'application/json; charset=UTF-8';\n        xhrParams.headers['X-Requested-With'] = 'XMLHttpRequest';\n        xhrParams.data = restArgs.postData;\n      } else if (\n        ['POST', 'PUT'].indexOf(xhrParams.method) !== -1\n        && xhrParams.url\n        && restArgs.postData\n      ) {\n        // 'POST'/'PUT' request with X-CSRF-Token\n        xhrParams.headers['Content-Type'] = 'application/json; charset=UTF-8';\n        xhrParams.headers['X-Requested-With'] = 'XMLHttpRequest';\n        xhrParams.headers['X-CSRF-Token'] = self.getCSRFToken(xhrParams.url);\n        xhrParams.data = restArgs.postData;\n      } else if (xhrParams.method === 'DELETE' && xhrParams.url) {\n        // 'DELETE' request with X-CSRF-Token\n        xhrParams.headers['X-CSRF-Token'] = self.getCSRFToken(xhrParams.url);\n      } else {\n        logger.error('_rest.callRestServer: invalid arguments:');\n        logger.error(restArgs);\n\n        reject({\n          status: 400,\n          statusText: `Expected to see arguments: { \"method\": \"GET/POST/PUT/DELETE\", \"url\": url } but recieved: ${JSON.stringify(\n            restArgs,\n          )}`,\n        });\n\n        // note that no request to make\n        doRequest = false;\n      }\n\n      // execute the request\n      if (doRequest) {\n        // handle the promise actions for the responses\n        xhr.onload = function onload() {\n          if (this.status >= 200 && this.status < 300) {\n            resolve(JSON.parse(xhr.response ? xhr.response : xhr.responseText));\n          } else {\n            reject({\n              status: this.status,\n              statusText: xhr.statusText,\n            });\n          }\n        };\n        xhr.onerror = function onerror() {\n          reject({\n            status: this.status,\n            statusText: xhr.statusText,\n          });\n        };\n        xhr.ontimeout = function ontimeout() {\n          reject({\n            status: this.status,\n            statusText: xhr.statusText,\n          });\n        };\n\n        xhr.open(xhrParams.method, xhrParams.url);\n\n        // add in the headers\n        for (const header in xhrParams.headers) {\n          if (xhrParams.headers.hasOwnProperty(header)) {\n            xhr.setRequestHeader(header, xhrParams.headers[header]);\n          }\n        }\n\n        // VBCS adapts XMLHttpRequest to use fetch but doesn't support timeout.\n        // This check silently ignores timeouts if they are not supported.\n        const timeoutOverridden = Object.getOwnPropertyDescriptor(\n          xhr,\n          'timeout',\n        );\n        if (timeoutOverridden === undefined || timeoutOverridden.writable) {\n          xhr.timeout = xhrParams.timeout; // for IE, need to set timeout after open()\n        }\n\n        // handle the beforeSend() callback and then make the request\n        beforeSendOK(xhr).then((result) => {\n          if (result) {\n            if (xhrParams.data) {\n              xhr.send(JSON.stringify(xhrParams.data));\n            } else {\n              xhr.send();\n            }\n          }\n        });\n      }\n    });\n\n    // return the promise\n    const response = await xmlHTTPPromise;\n    if (typeof self.coerceData === 'function') {\n      return self.coerceData(response);\n    }\n    return Promise.resolve(response);\n  }\n}\n\n// Content REST API handle '/content' prefix\nconst ContentAPIConfiguration = {\n  contextRoot: '/content',\n  defaultVersion: 'v1',\n  supportedVersions: [\n    {\n      semanticVersion: '1.0.0',\n      contentVersion: 'v1',\n    },\n    {\n      semanticVersion: '1.1.0',\n      contentVersion: 'v1.1',\n    },\n  ],\n  state: {\n    published: 'published',\n    draft: 'management',\n  },\n};\n\nclass ContentAPI {\n  constructor() {\n    // Make these objects part of the interface of this class\n    if (isNodeJS) {\n      this.restAPI = new RestAPINode(ContentAPIConfiguration);\n    } else {\n      this.restAPI = new RestAPIBrowser(ContentAPIConfiguration);\n    }\n  }\n\n  extractServer(contentServerURL) {\n    return this.restAPI.extractServer(contentServerURL);\n  }\n\n  async callRestServer(targetURL, restArgs) {\n    return this.restAPI.callRestServer(targetURL, restArgs);\n  }\n\n  static getContentVersion(caller, requestedVersion) {\n    // get semantic version\n    const regEx = /\\s*((([<>]?=?)\\s*(v)?([0-9]+)(\\.([0-9]+))?(\\.([0-9]+))?))\\s*/g;\n    const parsedVersion = regEx.exec(requestedVersion || '0.0.0') || [];\n    const semanticVersion = `${parsedVersion[5] || '0'}.${\n      parsedVersion[7] || '0'\n    }.${parsedVersion[9] || '0'}`;\n    // get the Supported Version based on the semantic version\n    for (let i = 0; i < ContentAPIConfiguration.supportedVersions.length; i += 1) {\n      if (ContentAPIConfiguration.supportedVersions[i].semanticVersion === semanticVersion) {\n        return ContentAPIConfiguration.supportedVersions[i].contentVersion;\n      }\n    }\n\n    // if we got to here, no version match\n    // warn user that non-supported version requested\n    logger.warn(\n      `Content SDK: \"${caller}\" has unrecognized Content Version: \"${requestedVersion}\" - defaulting to: version=\"${\n        this.defaultVersion\n      }\". To avoid this message, use one of the supported versions when creating a content client: ${JSON.stringify(\n        this.supportedVersions,\n      )}`,\n    );\n\n    // return the default version\n    return this.defaultVersion;\n  }\n\n  getCSRFToken(/* requestURL */) {\n    // Required for Management API\n    return 'CSRFToken';\n  }\n\n  createPrefix(args) {\n    // standard prefix is: \"http://<server>:<port>/content/[management||publish]/api/[v1|v1.1]\"\n    return `${args.contentServer + ContentAPIConfiguration.contextRoot}/${\n      ContentAPIConfiguration.state[args.contentType]\n    }/api/${this.contentVersion}`;\n  }\n\n  createSuffix(args) {\n    // standard suffix is:\n    // {search string}&[access-token|channelToken]={channelToken}&cb={cacheBuster}\n    const search = args.search || '';\n    const channelToken = args.channelToken\n      ? `${this.properties.tokenName}=${args.channelToken}`\n      : '';\n    const cacheBusterValue = typeof args.cacheBuster === 'object'\n      ? args.cacheBuster.contentKey\n      : args.cacheBuster;\n    const cacheBuster = cacheBusterValue ? `cb=${cacheBusterValue}` : '';\n    let suffix = '';\n\n    // add in search\n    suffix += search;\n\n    // add in channelToken\n    suffix += (suffix && channelToken ? '&' : '') + channelToken;\n\n    // add in cacheBuster\n    suffix += (suffix && cacheBuster ? '&' : '') + cacheBuster;\n\n    return suffix;\n  }\n\n  // Format the fully qualified REST URL\n  // path: section of the URL beyond the standard REST API\n  // args:\n  //    contentServer: '<protocol>://<host>:<port>' of the content server\n  //    contentType: [management|published]\n  //    search: search string to add as query string\n  //    channelToken: 'channelToken=<channelToken>' to be added\n  //    cacheBuster: 'cb=<cacheBuster>' to be added\n  formatURL(path, restArgs) {\n    const prefix = this.createPrefix(restArgs);\n    const suffix = this.createSuffix(restArgs);\n    const url = prefix\n      + path\n      + (suffix ? (path.indexOf('?') === -1 ? '?' : '&') + suffix : '');\n\n    logger.info(url);\n\n    return url;\n  }\n\n  resolveGetTypesPath(/* args */) {\n    return '/types';\n  }\n\n  // args.typeName: restrict aggregate query to specific types\n  resolveGetTypePath(args) {\n    return `/types/${args.typeName}`;\n  }\n\n  isDigitalAsset(id) {\n    return (\n      /^DigitalAsset_/i.test(id)\n      || (id.length === 36 && (/^CONT/.test(id) || /^CORE/.test(id)))\n    );\n  }\n\n  getRenditionURL(itemGUID, slug, renditionName, restArgs) {\n    let url = '';\n\n    if (slug || itemGUID) {\n      if (slug || this.isDigitalAsset(itemGUID)) {\n        // Content URL\n        const { format } = restArgs;\n        const { download } = restArgs;\n        const cacheBusterValue = typeof restArgs.cacheBuster === 'object'\n          ? restArgs.cacheBuster.contentKey\n          : restArgs.cacheBuster;\n        let joinChar = '?'; // character to use to join query parameters\n\n        // secure and non-secure assets now use the same path\n        const digitalAssets = restArgs.secureContent\n          ? this.properties.secureAssetURLName\n          : this.properties.assetURLName;\n\n        const rendition = renditionName || this.properties.digitalAssetDefault;\n        const identifier = itemGUID || `.by.slug/${slug}`;\n\n        url = `${this.createPrefix(\n          restArgs,\n        )}/${digitalAssets}/${identifier}/${rendition}`;\n\n        // add in any query parameters\n        if (cacheBusterValue) {\n          url += `${joinChar}cb=${cacheBusterValue}`;\n          joinChar = '&';\n        }\n        if (format) {\n          url += `${joinChar}format=${format}`;\n          joinChar = '&';\n        }\n        if (download) {\n          url += `${joinChar}download=true`;\n          joinChar = '&';\n        } else if (download === false) {\n          url += `${joinChar}download=false`;\n          joinChar = '&';\n        }\n        if (restArgs.contentType === 'published' && restArgs.channelToken) {\n          url += `${joinChar + this.properties.tokenName}=${\n            restArgs.channelToken\n          }`;\n          joinChar = '&';\n        }\n      } else {\n        // Documents URL\n        url = `${restArgs.contentServer}/documents/file/${itemGUID}`;\n      }\n    }\n\n    logger.info(url);\n    return url;\n  }\n\n  makeQueryParameters(args) {\n    const queryParams = utils.extend({}, args);\n    const searchParams = {\n      postData: {},\n      getData: '',\n      assetVersion: '',\n    };\n    let parameters = '';\n    const { search } = queryParams;\n\n    // remove Content SDK arguments and old properties we don't want to add as query parameters\n    delete queryParams.ids;\n    delete queryParams.IDs;\n    delete queryParams.id;\n    delete queryParams.ID;\n    delete queryParams.itemGUID;\n    delete queryParams.itemGUIDs;\n    delete queryParams.slug;\n    delete queryParams.timeout;\n    delete queryParams.search;\n    delete queryParams.types;\n    delete queryParams.beforeSend;\n    delete queryParams.contentType;\n    delete queryParams.language;\n\n    // define the string to separate each parameter on the URL\n    let separator = '';\n\n    // construct the URL query string from the properties passed in\n    for (const property in queryParams) {\n      if (queryParams.hasOwnProperty(property)) {\n        // if it's a valid URL property, include it\n        if (property === encodeURI(property)) {\n          let propVal = queryParams[property];\n\n          // convert the \"orderBy\" array property if required\n          // CaaS only supports a single orderBy value, so just use the first item in the array\n          if (\n            property === 'orderBy'\n            && Array.isArray(propVal)\n            && propVal.length === 1\n          ) {\n            const order = (propVal[0].order && propVal[0].order.toLowerCase()) || '';\n            const orderEntry = order\n              ? `:${order === 'des' ? 'desc' : order}`\n              : '';\n\n            propVal = propVal[0].name + orderEntry;\n          }\n\n          if (property !== 'expand') {\n            if (property === 'version') {\n              if (propVal !== undefined && propVal) {\n                searchParams.assetVersion = propVal;\n              }\n            } else if (typeof propVal !== 'object') {\n              // we're only handling scalar parameters in GET requests\n              parameters += `${separator + property}=${encodeURI(propVal)}`;\n              separator = '&';\n            }\n          }\n        }\n      }\n    }\n\n    // add in any old style 'search' properties\n    parameters += search ? separator + search : '';\n\n    // note that 'GET' call should be used and pass back the parameters\n    searchParams.method = 'GET';\n    searchParams.getData = parameters;\n\n    // note if should use aggregate call\n    // aggregate calls should be used for \"itemDepth\" != 0 and \"expand\" parameters\n    searchParams.useAggregate = queryParams.itemDepth || queryParams.expand;\n\n    return searchParams;\n  }\n}\n\n// Content API v1: Inherit from base with v1 specific overrides\nclass ContentApiV1Impl extends ContentAPI {\n  constructor() {\n    super();\n    this.contentVersion = 'v1';\n    this.properties = {\n      tokenName: 'access-token',\n      digitalAssetDefault: 'default',\n      assetURLName: 'digital-assets',\n      secureAssetURLName: 'secure-digital-assets',\n    };\n  }\n\n  resolveGetItemListPath(args) {\n    return `/items${args.useAggregate ? '/aggregate' : ''}${\n      args.types ? `?field:type:equals=${args.types}` : ''\n    }`;\n  }\n\n  resolveGetItemPath(args) {\n    return `/items/${args.itemGUID}${args.useAggregate ? '/aggregate' : ''}`;\n  }\n\n  resolveSearchPath(/* args */) {\n    return '/items/queries';\n  }\n\n  resolveGetBulkItemListPath(args) {\n    // args.itemGUIDs: array of IDs to add to the URL\n    return `/items/bulk${\n      args.useAggregate ? '/aggregate' : ''\n    }?ids=${args.itemGUIDs.join(',')}`;\n  }\n}\n\n// Content API v1.1: Inherit from v1 with v1.1 specific overrides\nclass ContentApiV11Impl extends ContentApiV1Impl {\n  constructor(contentVersion) {\n    super();\n    if (contentVersion) {\n      this.requestedContentVersion = contentVersion;\n    }\n    this.contentVersion = 'v1.1';\n    this.properties = {\n      tokenName: 'channelToken',\n      digitalAssetDefault: 'native',\n      assetURLName: 'assets',\n      secureAssetURLName: 'assets',\n    };\n  }\n\n  resolveGetItemListPath(args) {\n    let itemListURL = '/items';\n    let joinChar = '?';\n\n    // add in query\n    if (args.types) {\n      itemListURL += `${joinChar}field:type:equals=${args.types}`;\n      joinChar = '&';\n    }\n    // add in aggregate\n    if (args.useAggregate) {\n      itemListURL += `${joinChar}expand=\"all\"`;\n      joinChar = '&';\n    }\n\n    return itemListURL;\n  }\n\n  resolveGetItemPath(args) {\n    const language = args.language\n      ? `/variations/language/${args.language}?fields=all`\n      : '';\n    const nextParam = language ? '&' : '?';\n    const aggregate = args.useAggregate\n      ? `${nextParam}expand=${args.useAggregate}`\n      : '';\n    const slug = args.slug ? `.by.slug/${args.slug}` : '';\n\n    // Ignored if language is given to not create an invalid URL\n    let versionStr = '';\n    if (!language) {\n      if (args.assetVersion) {\n        versionStr = `/versions/${args.assetVersion}`;\n      }\n    }\n\n    if (args.itemGUID) {\n      // Get Published Item by ID:\n      // .../items/{id}\n      //\n      // Get Published Item by ID for specified language:\n      // .../items/{id}/variations/language/{languageValue}\n      return `/items/${args.itemGUID}${versionStr}${language}${aggregate}`;\n    }\n    // Get Published Item by slug:\n    // .../items/.by.slug/{slug}\n    //\n    // Get published item by slug for specified language:\n    // .../items/.by.slug/{slug}/variations/language/{languageValue}\n    return `/items/${slug}${versionStr}${language}${aggregate}`;\n  }\n\n  resolveQueryTaxonomyCategoriesPath(args) {\n    return `/taxonomies/${args.taxonomyGUID}/categories`;\n  }\n\n  resolveGetTaxonomiesPath(/* args */) {\n    return '/taxonomies';\n  }\n\n  resolveGetRecommendationPath(args) {\n    if (args.id) {\n      return `/personalization/recommendationResults/.by.id/${args.id}`;\n    }\n    return `/personalization/recommendationResults/${args.apiName}`;\n  }\n\n  resolveSearchPath(/* args */) {\n    return '/items';\n  }\n\n  resolveGetBulkItemListPath(args) {\n    // args.itemGUIDs: array of IDs to add to the URL\n    const idQuery = `(id eq \"${args.itemGUIDs.join('\" or id eq \"')}\")`;\n    const languageQuery = args.language\n      ? `(language eq \"${args.language}\")`\n      : '';\n\n    return `/items?q=${\n      languageQuery ? `(${idQuery} and ${languageQuery})` : idQuery\n    }`;\n  }\n\n  coerceData(response) {\n    const self = this;\n    return new Promise((resolve /* , reject */) => {\n      // if the requested content version is v1, coerce data from v1.1 to v1 format\n      if (self.requestedContentVersion === 'v1') {\n        if (typeof response.fields === 'object') {\n          // coerce single item\n          if (!response.data) {\n            response.data = response.fields;\n          }\n        } else if (Array.isArray(response.items)) {\n          // coerce array of items\n          response.items.forEach((item) => {\n            if (typeof item.fields === 'object' && !item.data) {\n              item.data = item.fields;\n            }\n          });\n        }\n      }\n\n      // resolve with updated data\n      return resolve(response);\n    });\n  }\n}\n\n// setup the REST API, content version is handled within the underlying REST call\nconst restAPIFactory = {\n  createRestAPI(contentVersion) {\n    const validContentVersion = ContentAPI.getContentVersion(\n      'ContentSDK create content client',\n      contentVersion,\n    );\n\n    if (validContentVersion === 'v1') {\n      // only support v1.1 now, so create a v1.1 API and set the requestd content version to v1\n      // we will coerce the data on fetch to be in the v1 format\n      // ToDo: wait for deprecation and fix up tests that are expecting\n      // 'v1' in the URL before making this change\n      return new ContentApiV11Impl('v1');\n    }\n    return new ContentApiV11Impl();\n  },\n};\n\n//\n// ------------------------------- Content Client SDK -------------------------------------\n//\n\n/**\n * Client content SDK object to interact with content published in Oracle Content Management:\n * <ul>\n * <li>Read the published content items</li>\n * <li>Render published content using named content layouts</li>\n * </ul>\n * @constructor\n * @alias ContentDeliveryClient\n * @param {object} args - A JavaScript object containing the parameters\n * to create the content delivery client instance.\n * @param {string} [args.contentServer='protocol://host:port'] -\n * URL to the Oracle Content Management instance providing content.\n * The default assumes the current '<i>protocol</i>://<i>host</i>:<i>port</i>'.\n * @param {('v1' | 'v1.1')} [args.contentVersion='v1.1'] -\n * The version of the content delivery REST API to use.\n * @param {string} args.channelToken - The Oracle Content and\n * Experience instance token for accessing published content.\n * @param {string} [args.cacheBuster=''] - The URL parameter used\n * to control whether or not content is fetched from the browser cache.\n * @param {boolean} [args.secureContent=false] - Content is secured and requires sign-in to view.\n * @param {string} [args.authorization] - Authorization header to include in the request.\n * @param {function} [args.beforeSend=undefined] - Callback passing\n * in the xhr (browser) or options (node) object before making the REST call.\n * @param {string} [args.timeout=0] - Timeout for the AJAX calls. Defaults to no timeout.\n * @param {object} args.logger - An object that implements the\n * standard log functions: ['error', 'warn', 'info', 'debug', 'log'].\n * @returns {ContentDeliveryClient}\n */\nclass ContentDeliveryClientImpl {\n  constructor(args) {\n    // create the restAPI based on the content version\n    this.restAPI = restAPIFactory.createRestAPI(args.contentVersion);\n\n    // update the logger entries\n    logger.updateLogger(args.logger);\n\n    // store the given properties\n    this.info = {\n      accessToken: args.channelToken || args.accessToken,\n      channelToken: args.channelToken || args.accessToken,\n      cacheBuster: args.cacheBuster,\n      beforeSend: args.beforeSend,\n      clientType: 'delivery',\n      contentServer: this.restAPI.extractServer(args.contentServer),\n      contentType: 'published',\n      secureContent: args.secureContent || false,\n      timeout: args.timeout || 0,\n      contentVersion:\n        this.restAPI.requestedContentVersion || this.restAPI.contentVersion,\n    };\n\n    // store if running in compiler\n    this.isCompiler = args.isCompiler;\n\n    // set the authorization value\n    this.info.authorization = args.authorization;\n\n    // note supported content types\n    this.validContentTypes = ['published'];\n    this.validLayoutTypes = this.validContentTypes;\n\n    // define the external API\n    this.publicSDK = {\n      getInfo: utils.bind(this.getInfo, this),\n      getItem: utils.bind(this.getItem, this),\n      getItems: utils.bind(this.getItems, this),\n      searchItems: utils.bind(this.queryItems, this),\n      queryItems: utils.bind(this.queryItems, this),\n      getRenditionURL: utils.bind(this.getRenditionURL, this),\n      getLayoutInfo: utils.bind(this.getLayoutInfo, this),\n      getRecommendationResults: utils.bind(this.getRecommendationResults, this),\n      loadContentLayout: utils.bind(this.loadContentLayout, this),\n      renderItem: utils.bind(this.renderItem, this),\n      expandMacros: utils.bind(this.expandMacros, this),\n      getTaxonomies: utils.bind(this.getTaxonomies, this),\n      queryTaxonomyCategories: utils.bind(this.queryTaxonomyCategories, this),\n    };\n\n    logger.debug('ContentClient.create: Content Info:');\n    logger.debug(this.info);\n  }\n\n  // common function for evaluating parameters to be used for the REST call\n  resolveRESTArgs(method, args) {\n    const searchParams = this.restAPI.makeQueryParameters(args);\n    const restArgs = utils.extend({}, this.info); // start with the Client properties\n\n    // add in the defaults\n    restArgs.method = method;\n    restArgs.contentType = this.getContentType(args.contentType);\n\n    // add in authorization\n    restArgs.authorization = this.getInfo().authorization;\n\n    // add in the language locale\n    restArgs.language = args.language;\n\n    // override call specific properties\n    restArgs.beforeSend = args.beforeSend || restArgs.beforeSend;\n    restArgs.timeout = args.timeout || restArgs.timeout;\n\n    //\n    // add in the searchParam options\n    //\n    restArgs.postData = searchParams.postData;\n    restArgs.useAggregate = searchParams.useAggregate;\n    restArgs.assetVersion = searchParams.assetVersion;\n\n    // getData passed in as 'search' parameter for URL construction\n    restArgs.search = searchParams.getData;\n\n    // rendition data may have format of the image\n    if (args.format) {\n      restArgs.format = args.format;\n    }\n\n    // links for download\n    if ((args.download === true) || (args.download === false)) {\n      restArgs.download = args.download;\n    }\n\n    // allow searchParams method override from GET to POST\n    if (restArgs.method === 'GET') {\n      restArgs.method = searchParams.method || restArgs.method;\n    }\n\n    return restArgs;\n  }\n\n  // Get Content Type based on allowed values\n  getContentType(contentType) {\n    const requestedType = (typeof contentType === 'string' && contentType.toLowerCase())\n      || this.info.contentType;\n\n    if (this.validContentTypes.indexOf(requestedType) !== -1) {\n      // return valid type\n      return requestedType;\n    }\n    // warn of invalid type\n    logger.warn(\n      `Invalid value for content type request: ${contentType}. Allowed values are: ${JSON.stringify(\n        this.validContentTypes,\n      )}. Defaulting to: ${this.info.contentType}`,\n    );\n\n    // default the type\n    return this.info.contentType;\n  }\n\n  // Get Layout Type based on allowed values\n  getLayoutType(layoutType) {\n    // default to the contentType if doesn't exist\n    const requestedType = (typeof layoutType === 'string' && layoutType.toLowerCase())\n      || this.info.contentType;\n\n    if (this.validLayoutTypes.indexOf(requestedType) !== -1) {\n      // return valid type\n      return requestedType;\n    }\n    logger.warn(\n      `Invalid value for layout type request: ${layoutType}. Allowed values are: ${JSON.stringify(\n        this.validLayoutTypes,\n      )}. Defaulting to: ${this.info.contentType}`,\n    );\n\n    // default the type\n    return this.info.contentType;\n  }\n\n  // Render the given render.js file with the data into the container\n  renderLayout(requireLayout, data, container, preLoadLayout, resolve, reject) {\n    // Rendering of layouts not supported on Node\n    // Layouts have dependencies on RequireJS AMD structure rather than CommonJS\n    if (isNodeJS) {\n      reject({\n        error: 'renderLayout function not supported under NodeJS',\n      });\n    } else if (preLoadLayout) {\n      // call appropriate render operation\n      requireConfig.preloadContentLayout(requireLayout, resolve, reject);\n    } else {\n      // provide this contentClient to the layout and render it\n      const layoutParams = utils.extend({}, data);\n      if (!layoutParams.contentClient) {\n        layoutParams.contentClient = this.publicSDK;\n      }\n      requireConfig.renderContentLayout(\n        requireLayout,\n        layoutParams,\n        container,\n        resolve,\n        reject,\n      );\n    }\n  }\n\n  /**\n   * Retrieves the values stored as part of the client object and used on each call.<br/>\n   * Once created, these values are immutable for the client instance.\n   * @returns {ContentSDK.ContentInfo} The information the SDK is using to\n   * retrieve content from Oracle Content Management.\n   * @example\n   * // get the information on the server and the state used by calls to this client\n   * console.log(contentClient.getInfo());\n   */\n  getInfo() {\n    // return a copy of the values\n    return utils.extend({}, this.info);\n  }\n\n  /**\n   * Get a single item given its ID or SLUG. <br/>\n   * The ID can be found in the search results.\n   * @param {object} args - A JavaScript object containing the \"getItem\" parameters.\n   * @param {string} [args.id] - The ID of the content item to return.\n   * <br/>The ID or SLUG must be specified.\n   * @param {string} [args.slug] - The SLUG of the content item to return,\n   * used instead of id. <br/>The ID or SLUG must be specified.\n   * @param {string} [args.language] - The language locale variant of the\n   * content item to return.\n   * @param {string} [args.version] - The version of the asset to return.\n   * Should only be used when calling getItem in a preview, not a delivery\n   * context. Ignored if language is specified\n   * @param {function} [args.beforeSend=undefined] - A callback passing in\n   * the xhr (browser) or options (node) object before making the REST call.\n   * @returns {Promise} A JavaScript Promise object that can be used to retrieve\n   * the data after the call has completed.\n   * @example\n   * // Getting item by ID\n   * contentPromise = contentClient.getItem({\n   *     'id': contentId\n   * });\n   *\n   *\n   * // Getting item by SLUG\n   * contentPromise = contentClient.getItem({\n   *     'slug': contentSlug\n   * });\n   *\n   * // handle the result\n   * contentPromise.then(\n   *     function (result) {\n   *         console.log(result);\n   *     },\n   *     function (error) {\n   *         console.log(error);\n   *     }\n   * );\n   */\n  getItem(params) {\n    const args = params || {};\n    const guid = args.id || args.ID || args.itemGUID;\n    const restCallArgs = this.resolveRESTArgs('GET', args);\n\n    // create the URL\n    const url = this.restAPI.formatURL(\n      this.restAPI.resolveGetItemPath({\n        itemGUID: guid,\n        assetVersion: restCallArgs.assetVersion,\n        useAggregate: restCallArgs.useAggregate,\n        language: params.language,\n        slug: params.slug,\n      }),\n      restCallArgs,\n    );\n\n    // make the rest call\n    return this.restAPI.callRestServer(url, restCallArgs);\n  }\n\n  /**\n   * Get a list of items that is returned by the recommendation ID. <br/>\n   * @ignore\n   * @param {object} args - A JavaScript object containing the\n   * \"getRecommendationResults\" parameters.\n   * @param {string} args.id - The ID of the Recommendation to run.\n   * @param {string} args.audienceAttributes -  Audience attributes\n   * that can be filtered by the attribute's categoryId\n   * @param {function} [args.beforeSend=undefined] - A callback passing\n   * in the xhr (browser) or options (node) object before making the REST call.\n   * @returns {Promise} A JavaScript Promise object that can be used to\n   * retrieve the data after the call has completed.\n   * @example\n   * contentPromise = contentClient.getRecommendationResults({\n   *     'id': recommendationId\n   * });\n   *\n   * // handle the result\n   * contentPromise.then(\n   *     function (result) {\n   *         console.log(result);\n   *     },\n   *     function (error) {\n   *         console.log(error);\n   *     }\n   * );\n   */\n  getRecommendationResults(params) {\n    const args = params || {};\n    const id = args.id || args.ID || args.itemGUID;\n    const { apiName } = args;\n    const contentType = params.contentType || this.info.contentType;\n    let restCallArgs;\n\n    // The Delivery API requires a GET, while the Management API requires a POST\n    if (contentType === 'published') {\n      restCallArgs = this.resolveRESTArgs('GET', args);\n\n      // append audience attributes to the query string\n      if (params.audienceAttributes) {\n        Object.keys(params.audienceAttributes).forEach(\n          (audienceAttributeName) => {\n            // the recommendationResults GET API requires prepending 'attribute.' to each AA\n            // bug 31212841 - multi-valued audience attribute added by repeating the name\n            // value pairs.\n            // by the time multi-valued AA gets here, it is an array of strings\n            let attrVals = params.audienceAttributes[audienceAttributeName];\n            if (!Array.isArray(attrVals)) {\n              attrVals = [attrVals];\n            }\n\n            const queryParam = attrVals\n              .map(\n                (value) => `${encodeURIComponent(\n                  `attribute.${audienceAttributeName}`,\n                )}=${encodeURIComponent(value)}`,\n              )\n              .join('&');\n\n            // append the audience attribute to the query string\n            if (restCallArgs.search) {\n              restCallArgs.search = `${restCallArgs.search}&${queryParam}`;\n            } else {\n              restCallArgs.search = queryParam;\n            }\n          },\n        );\n      }\n    } else {\n      restCallArgs = this.resolveRESTArgs('POST', args);\n\n      // setup the recommendation specific arguments\n      //  - recommendations do not require management calls so the CSRF\n      // token should not be required for POST requests\n      restCallArgs.noCSRFToken = true;\n\n      // add in the POST values\n      const assetState = this.info.contentType === 'published' ? 'PUBLISHED' : 'ALL';\n\n      if (params.audienceAttributes) {\n        restCallArgs.postData = {\n          audienceAttributes: params.audienceAttributes,\n          assetState,\n        };\n      }\n    }\n\n    // create the URL\n    const url = this.restAPI.formatURL(\n      this.restAPI.resolveGetRecommendationPath({\n        id,\n        apiName,\n      }),\n      restCallArgs,\n    );\n\n    // make the rest call\n    return this.restAPI.callRestServer(url, restCallArgs);\n  }\n\n  /**\n   * Get a list of items based on their IDs.\n   *\n   * @param {object} args - A JavaScript object containing the \"getItems\" parameters.\n   * @param {array} [args.ids=[]] - Restrict results to the list of requested items.\n   * @param {string} args.language - The language locale variant of the content items to return.\n   * @param {function} [args.beforeSend=undefined] - A callback passing in the xhr\n   * (browser) or options (node) object before making the REST call.\n   * @param {string} [args.fields='ALL'] - Any additional properties in the \"args\"\n   * object will be added to the query string parameters; for example, \"fields\".\n   * @returns {Promise} A JavaScript Promise object that can be used to retrieve the\n   * data after the call has completed.\n   * @example\n   * // get all items\n   * contentClient.getItems().then(function (items) {\n   *     console.log(items);\n   * });\n   *\n   * @example\n   * // get all items and order by type and name\n   * contentClient.getItems().then(function (data) {\n   *     // sort by type and then by name\n   *     console.log(data.items.sort(function (a, b) {\n   *         if (a.type.localeCompare(b.type) !== 0) {\n   *             return a.type.localeCompare(b.type);\n   *         } else {\n   *             return a.name.localeCompare(b.name);\n   *         }\n   *     }));\n   * });\n   */\n  getItems(params) {\n    const self = this;\n    const args = params || {};\n    const guids = args.ids || args.IDs || args.itemGUIDs;\n    const restCallArgs = self.resolveRESTArgs('GET', args);\n    let url;\n\n    logger.debug('ContentClient.getItems: arguments');\n    logger.debug(args);\n\n    // if a list of items is supplied\n    if (Array.isArray(guids) && guids.length > 0) {\n      const { length } = guids;\n      const chunk = 10;\n      let chunkGUIDs;\n      const bulkChunks = [];\n      const bulkPromise = new Promise((resolve, reject) => {\n        // break array up into into groups of 10\n        for (let i = 0; i < length; i += chunk) {\n          // get this chunk of GUIDs\n          chunkGUIDs = guids.slice(i, i + chunk);\n\n          // use bulk API for this chunk of content item IDs\n          url = self.restAPI.formatURL(\n            self.restAPI.resolveGetBulkItemListPath({\n              itemGUIDs: chunkGUIDs,\n              types: args.types,\n              useAggregate: restCallArgs.useAggregate,\n              language: restCallArgs.language,\n            }),\n            restCallArgs,\n          );\n\n          bulkChunks.push(self.restAPI.callRestServer(url, restCallArgs));\n        }\n\n        // resolve bulkChunks Promises when all requests complete\n        Promise.all(bulkChunks).then(\n          (arrayOfResults) => {\n            const allContentItems = {\n              items: [],\n            };\n\n            // handle v1 format\n            if (self.info.contentVersion === 'v1') {\n              allContentItems.items = {};\n\n              // combine all the results\n              arrayOfResults.forEach((results) => {\n                if (results && results.items) {\n                  allContentItems.items = utils.extend(\n                    allContentItems.items,\n                    results.items,\n                  );\n                }\n              });\n            } else {\n              // combine all the results\n              arrayOfResults.forEach((results) => {\n                allContentItems.items = allContentItems.items.concat(\n                  results.items,\n                );\n              });\n            }\n\n            // resolve with all the items\n            resolve(allContentItems);\n          },\n          (err) => {\n            reject(err);\n          },\n        );\n      });\n\n      // return the outer promise object, which will be resolved after all the items return\n      return bulkPromise;\n    }\n\n    // No list of IDs defined, get all the items based on the search query\n    url = self.restAPI.formatURL(\n      self.restAPI.resolveGetItemListPath({\n        itemGUID: args.itemGUID,\n        types: args.types,\n        useAggregate: restCallArgs.useAggregate,\n      }),\n      restCallArgs,\n    );\n\n    return self.restAPI.callRestServer(url, restCallArgs);\n  }\n\n  /**\n   * Get a list of items based on SCIM search criteria.<br/>\n   * All arguments are passed through to the Content Delivery REST API call.\n   *\n   * @param {object} args - A JavaScript object containing the \"queryItems\" parameters.\n   * @param {string} [args.q=''] - An SCIM query string to restrict results.\n   * @param {string} [args.fields=''] - A list of fields to include for each item returned.\n   * @param {number} [args.offset] - Return results starting at this number in the results.\n   * @param {number} [args.limit] - Limit the number of items returned.\n   * @param {array|string} [args.orderBy=[]] - The order by which results should be returned.\n   * @param {function} [args.beforeSend=undefined] - A callback passing in the xhr (browser)\n   * or options (node) object before making the REST call.\n   * @returns {Promise} A JavaScript Promise object that can be used to retrieve the data\n   * after the call has completed.\n   * @example\n   * // get all items and order by type and name\n   * contentClient.queryItems({\n   *     'q': '(type eq \"' + contentType + '\")',\n   *     'fields': 'ALL'\n   * }).then(function (items) {\n   *     console.log(items);\n   * });\n   */\n  queryItems(params) {\n    const self = this;\n    const args = params || {};\n    const restCallArgs = this.resolveRESTArgs('GET', args);\n\n    logger.debug('ContentClient.queryItems: arguments');\n    logger.debug(args);\n\n    // setup the search specific arguments\n    //  - search does not require management calls so the CSRF token should\n    // not be required for POST requests\n    restCallArgs.noCSRFToken = true;\n\n    // format the URL\n    const url = self.restAPI.formatURL(\n      self.restAPI.resolveSearchPath(),\n      restCallArgs,\n    );\n\n    return self.restAPI.callRestServer(url, restCallArgs);\n  }\n\n  /**\n   * Get categories for the specified taxonomy.<br/>\n   * All arguments are passed through to the Content Delivery REST API call.\n   *\n   * @param {object} args - A JavaScript object containing the \"queryTaxonomyCategories\" parameters.\n   * @param {string} args.id - The ID of the taxonomy.\n   * @returns {Promise} A JavaScript Promise object that can be used to retrieve the\n   * data after the call has completed.\n   * @example\n   * // get all categories for a taxonomy\n   * client.queryTaxonomyCategories({\n   *      'id': taxonomyId,\n   *      'q': '(name eq \"' + categoryName + '\")',\n   * }).then(function (topLevelItem) {\n   *      console.log(topLevelItem);\n   *      return topLevelItem;\n   * });\n   */\n  queryTaxonomyCategories(params) {\n    const args = params || {};\n    const guid = args.id || args.ID || args.itemGUID;\n    const restCallArgs = this.resolveRESTArgs('GET', args);\n\n    // create the URL\n    const url = this.restAPI.formatURL(\n      this.restAPI.resolveQueryTaxonomyCategoriesPath({\n        taxonomyGUID: guid,\n      }),\n      restCallArgs,\n    );\n\n    return this.restAPI.callRestServer(url, restCallArgs);\n  }\n\n  /**\n   * Get taxonomies for the channel.<br/>\n   * All arguments are passed through to the Content Delivery REST API call.\n   *\n   * @param {object} params - A JavaScript object containing the \"getTaxonomies\" parameters.\n   * @returns {Promise} A JavaScript Promise object that can be used to retrieve\n   * the data after the call has completed.\n   * @example\n   * // get all taxonomies\n   * client.getTaxonomies().then(function (topLevelItem) {\n   *      console.log(topLevelItem);\n   *      return topLevelItem;\n   * }, function (xhr, status, error) {\n   *      console.log(xhr.responseText);\n   * });\n   */\n  getTaxonomies(params) {\n    const args = params || {};\n    const restCallArgs = this.resolveRESTArgs('GET', args);\n\n    // create the URL\n    const url = this.restAPI.formatURL(\n      this.restAPI.resolveGetTaxonomiesPath(args),\n      restCallArgs,\n    );\n\n    // make the rest call\n    return this.restAPI.callRestServer(url, restCallArgs);\n  }\n\n  /**\n   * Get the native URL to render an image asset.<br/>\n   * @returns {string} A fully qualified URL to the published image asset.\n   * @param {object} args - A JavaScript object containing the \"getRenditionURL\" parameters.\n   * @param {string} args.id - The ID of the image asset. One of 'id' or 'slug' must be\n   * provided for the function to return a URL.\n   * @param {string} args.slug - The slug of the image asset. One of 'id' or 'slug' must be\n   * provided for the function to return a URL.\n   * @param {string } [args.type='native']  - The name of the desired rendition\n   * @param {string} [args.format] - The desired format. Required for non-native renditions\n   * but ignored for native. For image assets the value should be 'jpg' or 'webp'.\n   * @param {boolean} [args.download] - Pass <i>true</i> to add &download=true or <i>false</i>\n   * for &download=false.  This flag will force a content-disposition of 'attachment' or\n   * 'inline'.  If unspecified, the content server will choose a disposition based on\n   * the type of asset.\n   * @example\n   * //get the native rendition URL for this client\n   * contentClient.getRenditionURL({\n   *     id: 'CONTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1'\n   * });\n   *  @example\n   * //get the Thumbnail rendition URL for an image in JPEG format\n   * contentClient.getRenditionURL({\n   *     id: 'CONTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1',\n   *     type: 'Thumbnail',\n   *     format: 'jpg'\n   * });\n   *  @example\n   * //get the native rendition URL, to be rendered inline\n   * contentClient.getRenditionURL({\n   *     id: 'CONTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1',\n   *     download: false\n   * });\n   *  @example\n   * //get the native rendition URL by slug, to be rendered inline\n   * contentClient.getRenditionURL({\n   *     slug: 'pageBanner,\n   *     download: false\n   * });\n   */\n  getRenditionURL(params) {\n    const self = this;\n    const args = params || {};\n    const guid = args.id || args.ID || args.itemGUID;\n    const { slug } = args;\n    const renditionName = args.rendition || args.type;\n    const restCallArgs = self.resolveRESTArgs('GET', args);\n\n    if (this.isCompiler) {\n      // encode into a macro and let the compiler expand\n      return `[!--$SCS_DIGITAL_ASSET--]${guid}[/!--$SCS_DIGITAL_ASSET--]`;\n    }\n    return self.restAPI.getRenditionURL(guid, slug, renditionName, restCallArgs);\n  }\n\n  /**\n   * Retrieve metadata information about the content layout. <br/>\n   * <b>Note:</b> This method isn't supported if the Content Delivery SDK is used in NodeJS.\n   * @param {object} args - A JavaScript object containing the \"getLayoutInfo\" parameters.\n   * @param {string} args.layout - Name of the layout in the component catalog for Oracle\n   * Content Management.\n   * @returns {Promise} JavaScript Promise object that is resolved when the metadata for\n   * the layout is retrieved.\n   * @example\n   * // get the Content REST API versions supported by the content layout\n   * contentClient.getLayoutInfo({\n   *     'layout': contentLayout\n   * }).then(\n   *     function (layoutInfo) {\n   *         // determine the content versions supported by the layout\n   *         console.log('Content versions supported: ' + layoutInfo.contentVersion)\n   *     },\n   *     function (error) {\n   *         console.log('Error getting data: ' + error);\n   *     }\n   * );\n   */\n  getLayoutInfo(params) {\n    const self = this;\n    const args = params || {};\n    const isSystemLayout = ['system-default-layout', 'system-tile-layout'].indexOf(args.layout) > -1;\n    let layoutType;\n    let layoutFactory;\n\n    return new Promise((resolve, reject) => {\n      // validate required parameters passed\n      if (args.layout) {\n        // get the layout type and path to the content layout factory .js file\n        if (isSystemLayout) {\n          layoutType = 'system';\n          layoutFactory = args.layout;\n        } else {\n          layoutType = self.getLayoutType(args.layoutType);\n          layoutFactory = `${args.layout}/assets/render`;\n        }\n\n        // construct the require path to the content layout factory .js file\n        const requireLayout = `${\n          requireConfig.getContentLayoutRequirePath(self.info) + layoutType\n        }/${layoutFactory}`;\n        logger.debug(\n          `ContentClient.getLayoutInfo: require path: ${requireLayout}`,\n        );\n\n        // attempt to require in the layout\n        require([requireLayout], (ContentLayout) => {\n          let layoutContentVersion = ContentLayout.prototype.contentVersion;\n          // default the version if not defined\n          if (!layoutContentVersion) {\n            // notify the user\n            logger.warn(\n              `Content Layout: \"${args.layout}\" does not have a contentVersion specified. Assuming data needs to be fetched in \"v1.0\" format for this Content Layout.  To avoid this message, add the prototype.contentVersion property to the Content Layout Factory object.`,\n            );\n\n            layoutContentVersion = '1.0.0';\n          }\n\n          // return information about the layout\n          resolve({\n            name: args.layout,\n            layoutFactory,\n            layoutType,\n            requirePath: requireLayout,\n            contentVersion: layoutContentVersion,\n          });\n        });\n      } else {\n        logger.debug(\n          'ContentClient.getLayoutInfo: missing required parameters',\n        );\n\n        // invalid parmaters\n        reject(\n          `missing parameters in call to getLayoutInfo: ${JSON.stringify(args)}`,\n        );\n      }\n    });\n  }\n\n  /**\n   * Require in the requested content layout\n   * <b>Note:</b> This method isn't supported if the Content Delivery SDK is used in NodeJS.\n   * @param {object} args - A JavaScript object containing the \"renderItem\" parameters.\n   * @param {string} args.layout - Name of the layout to use to render the component.\n   * @returns {Promise} JavaScript Promise object that is resolved when the layout\n   * JavaScript is loaded\n   */\n  loadContentLayout(params) {\n    const self = this;\n    const args = params || {};\n    const isSystemLayout = ['system-default-layout', 'system-tile-layout'].indexOf(args.layout) > -1;\n    let layoutType;\n    let layoutFactory;\n    const loadItemPromise = new Promise((resolve, reject) => {\n      // validate required parameters passed\n      if (args.layout) {\n        // get the layout type and path to the content layout factory .js file\n        if (isSystemLayout) {\n          layoutType = 'system';\n          layoutFactory = args.layout;\n        } else {\n          layoutType = self.getLayoutType(args.layoutType);\n          layoutFactory = `${args.layout}/assets/render`;\n        }\n\n        // construct the require path to the content layout factory .js file\n        const requireLayout = `${\n          requireConfig.getContentLayoutRequirePath(self.info) + layoutType\n        }/${layoutFactory}`;\n        logger.debug(\n          `ContentClient.renderItem: require path: ${requireLayout}`,\n        );\n\n        require([requireLayout], (ContentLayout) => {\n          resolve(ContentLayout);\n        });\n      } else {\n        logger.debug('ContentClient.renderItem: missing required parameters');\n\n        // invalid parmaters\n        reject(\n          `missing parameters in call to renderLayout: ${JSON.stringify(args)}`,\n        );\n      }\n    });\n\n    return loadItemPromise;\n  }\n\n  /**\n   * Render the given data or content item using the named layout in the given container.<br>\n   * <b>Note:</b> This method isn't supported if the Content Delivery SDK is used in NodeJS.\n   * @param {object} args - A JavaScript object containing the \"renderItem\" parameters.\n   * @param {object} args.data - JSON data to use to render.\n   * @param {string} args.layout - Name of the layout to use to render the component.\n   * @param {DOMElement} args.container - Container DOMElement to append to.\n   * @returns {Promise} JavaScript Promise object that is resolved when the layout is\n   * loaded and rendered into the container.\n   * @example\n   * // render the item into the DOM element with a custom content layout expecting data\n   * compatible with Oracle Content Management Sites\n   * contentClient.getItem({\n   *     'id': contentId\n   * }).then(\n   *     function (contentItemData) {\n   *         // now the data is retrieved, render the layout\n   *         contentClient.renderItem({\n   *             'data': {\n   *                 contentItemData: contentItemData,\n   *                 scsData {\n   *                     contentClient: contentClient\n   *                 }\n   *             },\n   *             'layout': contentLayout,\n   *             'container': document.getElementById(containerDivId)\n   *         }).then(\n   *             function () {\n   *                 // render complete\n   *                 console.log('layout added to the page');\n   *             },\n   *             function (error) {\n   *                 console.log('error rendering layout onto the page: ' + JSON.stringify(error));\n   *             }\n   *         );\n   *     },\n   *     function (error) {\n   *         console.log('Error getting data: ' + error);\n   *     }\n   * );\n   * @example\n   * // render the item into the DOM element with a custom content layout expecting custom data\n   * contentClient.getItem({\n   *     'id': contentId\n   * }).then(\n   *     function (data) {\n   *         // now the data is retrieved, render the layout\n   *         contentClient.renderItem({\n   *             'data': data,\n   *             'layout': contentLayout,\n   *             'container': document.getElementById(containerDivId)\n   *         }).then(\n   *             function () {\n   *                 // render complete\n   *                 console.log('layout added to the page');\n   *             },\n   *             function (error) {\n   *                 console.log('error rendering layout onto the page: ' + JSON.stringify(error));\n   *             }\n   *         );\n   *     },\n   *     function (error) {\n   *         console.log('Error getting data: ' + error);\n   *     }\n   * );\n   */\n  renderItem(params) {\n    const self = this;\n    const args = params || {};\n    const isSystemLayout = ['system-default-layout', 'system-tile-layout'].indexOf(args.layout) > -1;\n    let layoutType;\n    let layoutFactory;\n    const renderItemPromise = new Promise((resolve, reject) => {\n      // validate required parameters passed\n      if (args.layout) {\n        // get the layout type and path to the content layout factory .js file\n        if (isSystemLayout) {\n          layoutType = 'system';\n          layoutFactory = args.layout;\n        } else {\n          layoutType = self.getLayoutType(args.layoutType);\n          layoutFactory = `${args.layout}/assets/render`;\n        }\n\n        // construct the require path to the content layout factory .js file\n        const requireLayout = `${\n          requireConfig.getContentLayoutRequirePath(self.info) + layoutType\n        }/${layoutFactory}`;\n        logger.debug(\n          `ContentClient.renderItem: require path: ${requireLayout}`,\n        );\n\n        // dynamically require in the layout and add it to the page\n        self.renderLayout(\n          requireLayout,\n          args.data,\n          args.container,\n          args.preloadLayout,\n          resolve,\n          reject,\n        );\n      } else {\n        logger.debug('ContentClient.renderItem: missing required parameters');\n\n        // invalid parmaters\n        reject(\n          `missing parameters in call to renderLayout: ${JSON.stringify(args)}`,\n        );\n      }\n    });\n\n    // return the JQuery deferrred object\n    return renderItemPromise;\n  }\n\n  /**\n   * Expand Content Macros.<br/>\n   * Content item fields can contain macros that reference other content items.\n   * For example, a Rich Text field can have links to digital assets. <br/>\n   * If a field that you want to render can contain macros, you can use this utilty function to\n   * expand the macros.\n   *\n   * This method supports expanding the macro CEC_DIGITAL_ASSET into a rendition URL\n   * for a digital asset.  If the asset GUID is followed by \",true\" then the URL\n   * will be a download URL.</p>\n   * Note that assets referenced via this macro may need to be\n   * explicitly published unless the macro was used in a Large Text field in which case\n   * the asset will be considered a dependency of the referencing asset and will be\n   * published at the same time as the referencing asset.\n   * @param {string} fieldValue - A field value that may contain macros.\n   * @returns {string} The \"fieldValue\" string with all macros expanded.\n   * @example\n   * // embed an image asset:\n   * contentClient.expandMacros(\n   * '<img src=\"[!--$CEC_DIGITAL_ASSET--]CONTABC123[/!--$CEC_DIGITAL_ASSET--]\"/>');\n   * @example\n   * // A download link:\n   * contentClient.expandMacros(\n   * '<a href=\"[!--$CEC_DIGITAL_ASSET--]CONTABC123,true[/!--$CEC_DIGITAL_ASSET--]\">Download</a>');\n   */\n  expandMacros(fieldValue) {\n    let afterValue = fieldValue || '';\n    logger.log(`expandMacros: beforeValue: ${fieldValue}`);\n\n    // supported macros\n    let macros = [\n      {\n        name: 'DIGITAL_ASSET',\n        macro: /\\[!--\\$CEC_DIGITAL_ASSET--\\]*(.*?) *\\[\\/!--\\$CEC_DIGITAL_ASSET--\\]/g,\n        value: utils.bind(function (matchString, digitalAssetIDStr) {\n          let assetId = digitalAssetIDStr;\n          let isDownload = false;\n          let idStrParts;\n\n          if (digitalAssetIDStr.indexOf(',')) {\n            idStrParts = digitalAssetIDStr.split(',');\n            assetId = idStrParts[0];\n            isDownload = idStrParts[1] === 'true';\n          }\n\n          return this.getRenditionURL({\n            id: assetId,\n            download: isDownload,\n          });\n        }, this),\n      },\n      {\n        name: 'PAGE_LINK',\n        macro: /\\[!--\\$SCS_PAGE--\\]*(.*?) *\\[\\/!--\\$SCS_PAGE--\\]/g,\n        value: utils.bind((matchString, page) => {\n          let pageId;\n          const renderApi = (window && window.SCSRenderAPI) || {};\n          if (typeof renderApi.getPageLinkData === 'function') {\n            const pageLinkData = renderApi.getPageLinkData(page);\n            pageId = pageLinkData && pageLinkData.href;\n          } else if (typeof renderApi.getPageLinkUrl === 'function') {\n            pageId = renderApi.getPageLinkUrl(page);\n          }\n          return pageId || '#';\n        }, this),\n      },\n    ];\n\n    // if it's a compiler, remove macros that compiler will expand\n    if (this.isCompiler) {\n      // currently compiler can handle all macros\n      macros = [];\n    }\n\n    const expandString = function expandString(stringValue) {\n      let expandedString = stringValue;\n      // expand each of the supported macros\n      macros.forEach((macroEntry) => {\n        expandedString = expandedString.replace(\n          macroEntry.macro,\n          macroEntry.value,\n        );\n      });\n      return expandedString;\n    };\n\n    const expandField = function expandField(obj) {\n      let expandedValue = obj;\n      if (typeof obj === 'string') {\n        expandedValue = expandString(obj);\n      } else if (obj && typeof obj === 'object') {\n        // traverse the object\n        if (Array.isArray(obj)) {\n          // expand all entries in the array\n          expandedValue = obj.map((entry) => expandField(entry));\n        } else {\n          // expand all properties of the object\n          expandedValue = {};\n          Object.keys(obj).forEach((key) => {\n            expandedValue[key] = expandField(obj[key]);\n          });\n        }\n      }\n\n      return expandedValue;\n    };\n    afterValue = expandField(afterValue);\n\n    logger.log(`expandMacros: afterValue: ${afterValue}`);\n\n    return afterValue;\n  }\n}\n\n//\n// ------------------------ Content Client Preview SDK -----------------------------\n//\n\n/**\n * Client content preview SDK object to interact with draft content in\n * Oracle Content Management:\n * <ul>\n * <li>Authenticated connection to the Content Server.</li>\n * <li>Read content types.</li>\n * <li>Read draft content items.</li>\n * <li>Render draft content using named content layouts.</li>\n * </ul>\n * The content preview client SDK object uses the \"/management/\" Content\n * REST API calls.  This requires the user to be logged in to the system.\n * @constructor\n * @alias ContentPreviewClient\n * @augments ContentDeliveryClient\n * @param {object} args - A JavaScript object containing the parameters to\n * create the content preview client instance.\n * @param {string} [args.contentServer='protocol://host:port'] - URL to the\n * Oracle Content Management instance providing content.  The default\n * assumes the current '<i>protocol</i>://<i>host</i>:<i>port</i>'.\n * @param {('v1' | 'v1.1')} [args.contentVersion='v1.1'] - The version of\n * the content preview REST API to use.\n * @param {string} args.channelToken - The Oracle Content Management\n * instance token for accessing published content.\n * @param {string} [args.cacheBuster=''] - The URL parameter used to control\n * whether or not content is fetched from the browser cache.\n * @param {boolean} [args.secureContent=false] - Content is secured and requires\n * sign-in to view.\n * @param {string} [args.authorization] - Authorization header to include in the request.\n * @param {function} [args.beforeSend=undefined] - Callback passing in the xhr\n * (browser) or options (node) object before making the REST call.\n * @param {string} [args.timeout=0] - Timeout for the AJAX calls. Defaults to no timeout.\n * @param {object} args.logger - An object that implements the standard log\n * functions: ['error', 'warn', 'info', 'debug', 'log'].\n * @returns {ContentPreviewClient}\n */\nclass ContentPreviewClientImpl extends ContentDeliveryClientImpl {\n  constructor(args) {\n    super(args);\n\n    this.restAPI = restAPIFactory.createRestAPI(args.contentVersion);\n\n    // update the logger entries\n    logger.updateLogger(args.logger);\n\n    // store the given properties\n    this.info = {\n      accessToken: args.channelToken || args.accessToken,\n      channelToken: args.channelToken || args.accessToken,\n      beforeSend: args.beforeSend,\n      cacheBuster: args.cacheBuster,\n      clientType: 'preview',\n      contentServer: this.restAPI.extractServer(args.contentServer),\n      contentType:\n        args.contentType && args.contentType.toLowerCase() === 'published'\n          ? 'published'\n          : 'draft',\n      secureContent: args.secureContent || false,\n      timeout: args.timeout || 0,\n      contentVersion:\n        this.restAPI.requestedContentVersion || this.restAPI.contentVersion,\n    };\n\n    // store if running in compiler\n    this.isCompiler = args.isCompiler;\n\n    // set the authorization value\n    this.info.authorization = args.authorization;\n\n    // note supported content types\n    this.validContentTypes = ['published', 'draft'];\n    this.validLayoutTypes = this.validContentTypes;\n\n    // define the external API\n    this.publicSDK = {\n      getInfo: utils.bind(this.getInfo, this),\n      getItem: utils.bind(this.getItem, this),\n      getItems: utils.bind(this.getItems, this),\n      searchItems: utils.bind(this.queryItems, this),\n      queryItems: utils.bind(this.queryItems, this),\n      getRenditionURL: utils.bind(this.getRenditionURL, this),\n      getLayoutInfo: utils.bind(this.getLayoutInfo, this),\n      getRecommendationResults: utils.bind(this.getRecommendationResults, this),\n      loadContentLayout: utils.bind(this.loadContentLayout, this),\n      renderItem: utils.bind(this.renderItem, this),\n      expandMacros: utils.bind(this.expandMacros, this),\n      getTypes: utils.bind(this.getTypes, this),\n      getType: utils.bind(this.getType, this),\n      getTaxonomies: utils.bind(this.queryTaxonomies, this),\n      queryTaxonomies: utils.bind(this.queryTaxonomies, this),\n      queryTaxonomyCategories: utils.bind(this.queryTaxonomyCategories, this),\n    };\n\n    logger.debug('ContentClient.create: Content Info:');\n    logger.debug(this.info);\n  }\n\n  /**\n   * Get a list of item types based on the search criteria.\n   * @param {object} args A JavaScript object containing the \"getTypes\"\n   * parameters. If empty, it will return all content types.\n   * @param {number} [args.limit] - Limit the number of content types returned.\n   * @param {number} [args.offset] - Return results starting at this number in\n   * the results.\n   * @param {function} [args.beforeSend=undefined] - A callback passing in the\n   * xhr (browser) or options (node) object before making the REST call.\n   * @returns {Promise} A JavaScript Promise object that can be used to retrieve\n   * the data after the call has completed.\n   * @example\n   * contentClient.getTypes().then(\n   *     function (data) {\n   *         console.log(data);\n   *     }).catch(function (error) {\n   *         console.log(error);\n   *     });\n   * @example\n   * contentClient.getTypes({\n   *     limit: 10\n   * }).then(\n   *     function (data) {\n   *         console.log(data);\n   *     }).catch(function (error) {\n   *         console.log(error);\n   *     });\n   */\n  getTypes(params) {\n    const self = this;\n    const args = params || {};\n    const restCallArgs = self.resolveRESTArgs('GET', args);\n\n    logger.debug('ContentClient.getTypes: arguments');\n    logger.debug(args);\n\n    const url = self.restAPI.formatURL(\n      self.restAPI.resolveGetTypesPath(),\n      restCallArgs,\n    );\n\n    return self.restAPI.callRestServer(url, restCallArgs);\n  }\n\n  /**\n   * Get a single item type given it's name. <br/>\n   * The name can be found from the search results.\n   * @param {object} args A JavaScript object containing the \"getType\" parameters.\n   * @param {string} args.typeName The name of the content type to return.\n   * @returns {Promise} A JavaScript Promise object that can be used to retrieve\n   * the data after the call has completed\n   * @example\n   * contentClient.getType({\n   *     'typeName': 'Customer'\n   * }).then(\n   *     function (data) {\n   *         console.log(data);\n   *     }).catch(function (error) {\n   *         console.log(error);\n   *     });\n   */\n  getType(params) {\n    const self = this;\n    const args = params || {};\n    const restCallArgs = self.resolveRESTArgs('GET', args);\n\n    logger.debug('ContentClient.getType: arguments');\n    logger.debug(args);\n\n    const url = self.restAPI.formatURL(\n      self.restAPI.resolveGetTypePath({\n        typeName: args.typeName,\n      }),\n      restCallArgs,\n    );\n\n    return self.restAPI.callRestServer(url, restCallArgs);\n  }\n\n  /**\n   * Get taxonomies for the channel.<br/>\n   * All arguments are passed through to the Content Delivery REST API call.\n   *\n   * @param {object} params - A JavaScript object containing the \"queryTaxonomies\" parameters.\n   * @returns {Promise} A JavaScript Promise object that can be used to retrieve\n   * the data after the call has completed.\n   * @example\n   * // get all taxonomies in draft status\n   * client.queryTaxonomies({\n   *      'q': '(status eq \"' + draft + '\")',\n   * }).then(function (topLevelItem) {\n   *      return topLevelItem;\n   * }, function (xhr, status, error) {\n   *      console.log(xhr.responseText);\n   * });\n   */\n  queryTaxonomies(params) {\n    return this.getTaxonomies(params);\n  }\n}\n\n//\n// ------------------------------- Content SDK -------------------------------------\n//\n\n/**\n * @constructor\n * @alias ContentSDK\n */\n\nclass contentSDK {\n  /**\n   * Create a client content SDK object to interact with content published\n   * in Oracle Content Management:\n   * <ul>\n   * <li>Read the published content items</li>\n   * <li>Render published content using named content layouts</li>\n   * </ul\n   * @memberof ContentSDK\n   * @param {object} args - A JavaScript object containing the parameters to\n   * create the content delivery client instance.\n   * @param {string} [args.contentServer='protocol://host:port'] - URL to the\n   * Oracle Content Management instance providing content.  The default\n   * assumes the current '<i>protocol</i>://<i>host</i>:<i>port</i>'.\n   * @param {('v1' | 'v1.1')} [args.contentVersion='v1.1'] - The version of the\n   * content delivery REST API to use.\n   * @param {string} args.channelToken - The Oracle Content Management instance\n   * token for accessing published content.\n   * @param {string} [args.cacheBuster=''] - The URL parameter used to control\n   * whether or not content is fetched from the browser cache.\n   * @param {boolean} [args.secureContent=false] - Content is secured and requires sign-in to view.\n   * @param {string} [args.authorization] - Authorization header to include in the request.\n   * @param {function} [args.beforeSend=undefined] - Callback passing in the xhr\n   * (browser) or options (NodeJS) object before making the REST call.\n   * @param {string} [args.timeout=0] - Timeout for the AJAX calls, defaults to no timeout.\n   * @param {object} args.logger - An object that implements the standard log functions:\n   * ['error', 'warn', 'info', 'debug', 'log'].\n   * @returns {ContentDeliveryClient}\n   *\n   * @example\n   * // create a ContentDeliveryClient and output logging 'info' messages to the console\n   * var contentClient = contentSDK.createDeliveryClient({\n   *     'contentServer': contentServer,\n   *     'channelToken': channelToken,\n   *     'logger': {\n   *         info: function (message) {\n   *             console.log(message);\n   *         }\n   *     }\n   * });\n   */\n  static createDeliveryClient(params) {\n    // create the delivery client with the given args\n    const newSDK = new ContentDeliveryClientImpl(\n      typeof params === 'object' ? params : {},\n    );\n\n    logger.debug(\n      'ContentSDK.createDelivery: created new Content SDK client object:',\n    );\n    logger.debug(newSDK);\n\n    // expose public SDK if it was created or undefined if it failed\n    return newSDK ? newSDK.publicSDK : undefined;\n  }\n\n  /**\n   * Create a client content preview SDK object to interact with draft content\n   * in Oracle Content Management:\n   * <ul>\n   * <li>Authenticated connection to the Content Server.</li>\n   * <li>Read content types.</li>\n   * <li>Read draft content items.</li>\n   * <li>Render draft content using named content layouts.</li>\n   * </ul>\n   * The content preview client SDK object uses the \"/management/\" Content REST\n   * API calls.  This requires the user to be logged in to the system.\n   * @memberof ContentSDK\n   * @param {object} args - A JavaScript object containing the parameters to create\n   * the content delivery client instance.\n   * @param {string} [args.contentServer='protocol://host:port'] - URL to the Oracle\n   * Content Management instance providing content.  The default assumes the\n   * current '<i>protocol</i>://<i>host</i>:<i>port</i>'.\n   * @param {('v1' | 'v1.1')} [args.contentVersion='v1.1'] - The version of the\n   * content delivery REST API to use.\n   * @param {string} args.channelToken - The Oracle Content Management instance\n   * token for accessing published content.\n   * @param {string} [args.cacheBuster=''] - The URL parameter used to control whether\n   * or not content is fetched from the browser cache.\n   * @param {boolean} [args.secureContent=false] - Content is secured and requires sign-in to view.\n   * @param {string} [args.authorization] - Authorization header to include in the request.\n   * @param {function} [args.beforeSend=undefined] - Callback passing in the xhr\n   * (browser) or options (NodeJS) object before making the REST call.\n   * @param {string} [args.timeout=0] - Timeout for the AJAX calls, defaults to no timeout.\n   * @param {object} args.logger - An object that implements the standard log functions:\n   * ['error', 'warn', 'info', 'debug', 'log'].\n   * @returns {ContentPreviewClient}\n   *\n   * @example\n   * // create a ContentPreviewClient and output logging 'info' messages to the console\n   * var contentClient = contentSDK.createPreviewClient({\n   *     'contentServer': contentServer,\n   *     'channelToken': channelToken,\n   *     'logger': {\n   *         info: function (message) {\n   *             console.log(message);\n   *         }\n   *     }\n   * });\n   */\n  static createPreviewClient(params) {\n    const newSDK = new ContentPreviewClientImpl(\n      typeof params === 'object' ? params : {},\n    );\n\n    logger.debug(\n      'ContentSDK.createPreviewClient: created new Content SDK client object:',\n    );\n    logger.debug(newSDK);\n\n    // expose public SDK if it was created or undefined if it failed\n    return newSDK ? newSDK.publicSDK : undefined;\n  }\n\n  /**\n   * Content Client Information\n   * @typedef {Object} ContentInfo\n   * @memberof ContentSDK\n   * @property {string} contentServer - The URL to the server for content.\n   * @property {string} clientType - The type of content client ['delivery' | 'preview'].\n   * @property {string} contentType - Whether to access 'published' or 'draft' content.\n   * @property {string} contentVersion - The version of the Content Delivery REST API to use.\n   * @property {string} channelToken - The Oracle Content Management instance token\n   * for accessing published content.\n   * @property {boolean} secureContent - Content is secured and requires sign-in to view.\n   * @property {string} authorization - Authorization header to include in the request.\n   * @property {string} beforeSend - Callback passing in the xhr (browser) or options\n   * (node) object before making the REST call.\n   * @property {string} timeout - Default timeout for AJAX calls, which can be overridden\n   * on an individual call basis.\n   * @property {string} cacheBuster - Adds \"cb={cacheBusterValue}\" to the URL to enable\n   * distinct browser caching of GET requests.\n   */\n}\n\n/**\n   * Create a client content SDK object to interact with content published\n   * in Oracle Content Management:\n   * <ul>\n   * <li>Read the published content items</li>\n   * <li>Render published content using named content layouts</li>\n   * </ul\n   * @param {object} args - A JavaScript object containing the parameters to\n   * create the content delivery client instance.\n   * @param {string} [args.contentServer='protocol://host:port'] - URL to the\n   * Oracle Content Management instance providing content.  The default\n   * assumes the current '<i>protocol</i>://<i>host</i>:<i>port</i>'.\n   * @param {('v1' | 'v1.1')} [args.contentVersion='v1.1'] - The version of the\n   * content delivery REST API to use.\n   * @param {string} args.channelToken - The Oracle Content Management instance\n   * token for accessing published content.\n   * @param {string} [args.cacheBuster=''] - The URL parameter used to control\n   * whether or not content is fetched from the browser cache.\n   * @param {boolean} [args.secureContent=false] - Content is secured and requires sign-in to view.\n   * @param {string} [args.authorization] - Authorization header to include in the request.\n   * @param {function} [args.beforeSend=undefined] - Callback passing in the xhr\n   * (browser) or options (NodeJS) object before making the REST call.\n   * @param {string} [args.timeout=0] - Timeout for the AJAX calls, defaults to no timeout.\n   * @param {object} args.logger - An object that implements the standard log functions:\n   * ['error', 'warn', 'info', 'debug', 'log'].\n   * @returns {ContentDeliveryClient}\n   *\n   * @example\n   * // create a ContentDeliveryClient and output logging 'info' messages to the console\n   * import { createDeliveryClient } from '@oracle/content-management-sdk';\n   * var contentClient = createDeliveryClient({\n   *     'contentServer': contentServer,\n   *     'channelToken': channelToken,\n   *     'logger': {\n   *         info: function (message) {\n   *             console.log(message);\n   *         }\n   *     }\n   * });\n   */\nfunction createDeliveryClient(param) {\n  return contentSDK.createDeliveryClient(param);\n}\n\n/**\n   * Create a client content preview SDK object to interact with draft content\n   * in Oracle Content Management:\n   * <ul>\n   * <li>Authenticated connection to the Content Server.</li>\n   * <li>Read content types.</li>\n   * <li>Read draft content items.</li>\n   * <li>Render draft content using named content layouts.</li>\n   * </ul>\n   * The content preview client SDK object uses the \"/management/\" Content REST\n   * API calls.  This requires the user to be logged in to the system.\n   * @param {object} args - A JavaScript object containing the parameters to create\n   * the content delivery client instance.\n   * @param {string} [args.contentServer='protocol://host:port'] - URL to the Oracle\n   * Content Management instance providing content.  The default assumes the\n   * current '<i>protocol</i>://<i>host</i>:<i>port</i>'.\n   * @param {('v1' | 'v1.1')} [args.contentVersion='v1.1'] - The version of the\n   * content delivery REST API to use.\n   * @param {string} args.channelToken - The Oracle Content Management instance\n   * token for accessing published content.\n   * @param {string} [args.cacheBuster=''] - The URL parameter used to control whether\n   * or not content is fetched from the browser cache.\n   * @param {boolean} [args.secureContent=false] - Content is secured and requires sign-in to view.\n   * @param {string} [args.authorization] - Authorization header to include in the request.\n   * @param {function} [args.beforeSend=undefined] - Callback passing in the xhr\n   * (browser) or options (NodeJS) object before making the REST call.\n   * @param {string} [args.timeout=0] - Timeout for the AJAX calls, defaults to no timeout.\n   * @param {object} args.logger - An object that implements the standard log functions:\n   * ['error', 'warn', 'info', 'debug', 'log'].\n   * @returns {ContentPreviewClient}\n   *\n   * @example\n   * // create a ContentPreviewClient and output logging 'info' messages to the console\n   * import { createPreviewClient } from '@oracle/content-management-sdk';\n   * var contentClient = createPreviewClient({\n   *     'contentServer': contentServer,\n   *     'channelToken': channelToken,\n   *     'logger': {\n   *         info: function (message) {\n   *             console.log(message);\n   *         }\n   *     }\n   * });\n   */\nfunction createPreviewClient(param) {\n  return contentSDK.createPreviewClient(param);\n}\n\nexport { contentSDK, createDeliveryClient, createPreviewClient };\n"],"names":["isNodeJS","window","process","utils","bind","func","owner","apply","extend","dest","orig","prop","hasOwnProperty","logger","theLogger","logLevel","logLevels","dontLog","updateLogger","newLogger","i","length","requireConfig","requirePaths","getContentLayoutRequirePath","info","contentServer","cacheBuster","layoutKey","systemKey","layoutCacheBuster","systemCacheBuster","baseRequirePath","Math","floor","random","paths","requirejs","config","preloadContentLayout","requireLayout","resolve","reject","require","err","warn","renderContentLayout","layoutParams","container","ContentLayout","renderLayout","renderPromise","render","then","errorStatus","RestAPINode","args","Object","assign","requireOnlyOnNodeJS","pkg","undefined","extractServer","contentServerURL","url","parsedURL","parse","protocol","hostname","port","callRestServer","targetURL","restArgs","self","debug","method","protocolCalls","nodePromise","Promise","options","protocolCall","restRequest","proxyType","proxy","env","oce_https_proxy","oce_http_proxy","HttpsProxyAgent","agent","e","beforeSendOK","currentOptions","bsResolve","bsReject","beforeSend","beforeSendResult","status","statusText","requestResponse","response","body","responseStatus","statusCode","on","chunk","jsonResponse","JSON","error","toUpperCase","result","get","noCSRFToken","postData","bodyString","stringify","headers","request","write","socket","setTimeout","timeout","response2","coerceData","RestAPIBrowser","location","href","document","createElement","xmlHTTPPromise","currentXHR","xhr","XMLHttpRequest","xhrParams","doRequest","authorization","contentType","indexOf","Authorization","data","getCSRFToken","onload","responseText","onerror","ontimeout","open","header","setRequestHeader","timeoutOverridden","getOwnPropertyDescriptor","writable","send","ContentAPIConfiguration","contextRoot","defaultVersion","supportedVersions","semanticVersion","contentVersion","state","published","draft","ContentAPI","restAPI","getContentVersion","caller","requestedVersion","regEx","parsedVersion","exec","createPrefix","createSuffix","search","channelToken","properties","tokenName","cacheBusterValue","contentKey","suffix","formatURL","path","prefix","resolveGetTypesPath","resolveGetTypePath","typeName","isDigitalAsset","id","test","getRenditionURL","itemGUID","slug","renditionName","format","download","joinChar","digitalAssets","secureContent","secureAssetURLName","assetURLName","rendition","digitalAssetDefault","identifier","makeQueryParameters","queryParams","searchParams","getData","assetVersion","parameters","ids","IDs","ID","itemGUIDs","types","language","separator","property","encodeURI","propVal","Array","isArray","order","toLowerCase","orderEntry","name","useAggregate","itemDepth","expand","ContentApiV1Impl","resolveGetItemListPath","resolveGetItemPath","resolveSearchPath","resolveGetBulkItemListPath","join","ContentApiV11Impl","requestedContentVersion","itemListURL","nextParam","aggregate","versionStr","resolveQueryTaxonomyCategoriesPath","taxonomyGUID","resolveGetTaxonomiesPath","resolveGetRecommendationPath","apiName","idQuery","languageQuery","fields","items","forEach","item","restAPIFactory","createRestAPI","validContentVersion","ContentDeliveryClientImpl","accessToken","clientType","isCompiler","validContentTypes","validLayoutTypes","publicSDK","getInfo","getItem","getItems","searchItems","queryItems","getLayoutInfo","getRecommendationResults","loadContentLayout","renderItem","expandMacros","getTaxonomies","queryTaxonomyCategories","resolveRESTArgs","getContentType","requestedType","getLayoutType","layoutType","preLoadLayout","contentClient","params","guid","restCallArgs","audienceAttributes","keys","audienceAttributeName","attrVals","queryParam","map","value","encodeURIComponent","assetState","guids","chunkGUIDs","bulkChunks","bulkPromise","slice","push","all","arrayOfResults","allContentItems","results","concat","type","isSystemLayout","layout","layoutFactory","layoutContentVersion","prototype","requirePath","loadItemPromise","renderItemPromise","preloadLayout","fieldValue","afterValue","log","macros","macro","matchString","digitalAssetIDStr","assetId","isDownload","idStrParts","split","page","pageId","renderApi","SCSRenderAPI","getPageLinkData","pageLinkData","getPageLinkUrl","expandString","stringValue","expandedString","macroEntry","replace","expandField","obj","expandedValue","entry","key","ContentPreviewClientImpl","getTypes","getType","queryTaxonomies","contentSDK","createDeliveryClient","newSDK","createPreviewClient","param"],"mappings":"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BAAJ,CACb,OAAO0B,MAAP,KAAkB,QAAlB,GAA6BA,MAA7B,GAAsC,EADzB,CAAf;AAIAxQ,IAAAA,MAAM,CAAC6D,KAAP,CACE,mEADF;AAGA7D,IAAAA,MAAM,CAAC6D,KAAP,CAAa8Q,MAAb,EATkC;;AAYlC,WAAOA,MAAM,GAAGA,MAAM,CAACvF,SAAV,GAAsBpM,SAAnC;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;aACS4R,sBAAP,6BAA2BpE,MAA3B,EAAmC;AACjC,QAAMmE,MAAM,GAAG,IAAIN,wBAAJ,CACb,OAAO7D,MAAP,KAAkB,QAAlB,GAA6BA,MAA7B,GAAsC,EADzB,CAAf;AAIAxQ,IAAAA,MAAM,CAAC6D,KAAP,CACE,wEADF;AAGA7D,IAAAA,MAAM,CAAC6D,KAAP,CAAa8Q,MAAb,EARiC;;AAWjC,WAAOA,MAAM,GAAGA,MAAM,CAACvF,SAAV,GAAsBpM,SAAnC;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS0R,oBAAT,CAA8BG,KAA9B,EAAqC;AACnC,SAAOJ,UAAU,CAACC,oBAAX,CAAgCG,KAAhC,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASD,mBAAT,CAA6BC,KAA7B,EAAoC;AAClC,SAAOJ,UAAU,CAACG,mBAAX,CAA+BC,KAA/B,CAAP;AACD;;;;;;"}